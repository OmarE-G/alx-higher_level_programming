>>> add = __import__('0-add_integer').add_integer
>>> add(1,4)
5
>>> add(1)
99
>>> add('1')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 5, in add_integer
    raise (TypeError("a must be an integer"))
TypeError: a must be an integer
>>> add(1, 'b')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 7, in add_integer
    raise (TypeError("b must be an integer"))
TypeError: b must be an integer
>>> add(1.1, 2.2)
3
>>> add(0.00000000000000001E308, 980.000000000000000001E308)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 8, in add_integer
    return int(a) + int(b)
                    ^^^^^^
OverflowError: cannot convert float infinity to integer
>>> add(float('nan'), 1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 8, in add_integer
    return int(a) + int(b)
           ^^^^^^
ValueError: cannot convert float NaN to integer