>>> geo = __import__("7-base_geometry").BaseGeometry
>>> ob = geo()
>>> ob.integer_validator("a", 1)
>>> ob.integer_validator("a", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 18, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: a must be greater than 0
>>> ob.integer_validator("a", -1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 18, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: a must be greater than 0
>>> ob.integer_validator("a", 1)
>>> ob.integer_validator("a", 100)
>>> ob.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 12, in area
    raise Exception("area() is not implemented")
Exception: area() is not implemented
>>> ob.integer_validator("a", "A")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: a must be an integer
>>> ob.integer_validator("a", True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: a must be an integer
>>> ob.integer_validator("a", 0.1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: a must be an integer
>>> ob.integer_validator("a")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
>>> ob.integer_validator("a", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: a must be an integer
>>> ob.integer_validator("a", (1,1))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: a must be an integer
>>> ob.integer_validator("a", (1,))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: a must be an integer
>>> ob.integer_validator("a", [1])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: a must be an integer
>>> ob.integer_validator("a", {1, 2})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/omar/ALX/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: a must be an integer
>>> ob.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'